<?xml version="1.0" encoding="UTF-8"?>
<chapter id="inheritance">
  <title>Inheritance and specialization</title>
  
  <para>A bean may inherit type-level metadata and members from its superclasses.</para>
  
  <para>Inheritance of type-level metadata by beans from their superclasses is controlled 
  via use of the Java <literal>@Inherited</literal> meta-annotation. Type-level metadata 
  is never inherited from interfaces implemented by a bean.</para>
  
  <para>Member-level metadata is not inherited. However, injected fields, initializer 
  methods, lifecycle callback methods and non-static observer methods are inherited
  by beans from their superclasses.</para>
  
  <para>The implementation of a bean may be extended by the implementation of a second 
  bean. This specification recognizes two distinct scenarios in which this situation 
  occurs:</para>
  
  <itemizedlist>
    <listitem>
      <para>The second bean <emphasis>specializes</emphasis> the first bean in
      certain deployment scenarios. In these deployments, the second bean
      completely replaces the first, fulfilling the same role in the system.</para>
    </listitem>
    <listitem>
      <para>The second bean is simply reusing the Java implementation, and otherwise
      bears no relation to the first bean. The first bean may not even have been
      designed for use as a contextual object.</para>
    </listitem>
  </itemizedlist>
  
  <para>The two cases are quite dissimilar.</para>
  
  <para>By default, Java implementation reuse is assumed. In this case, the two beans
  have different roles in the system, and may both be available in a particular
  deployment.</para>
  
  <para>The bean developer may explicitly specify that the second bean specializes the 
  first. Then the second bean inherits, and may not override, the qualifiers and bean name of 
  the first bean. The second bean is able to serve the same role in the system as the 
  first. In a particular deployment, only one of the two beans may fulfill that role.</para> 
  
  <section id="type-level-inheritance">
    <title>Inheritance of type-level metadata</title>
    
    <para>Suppose a class X is extended directly or indirectly by the bean class of a managed 
    bean or session bean Y.</para>
    
    <itemizedlist>
      <listitem>
        <para>If X is annotated with a qualifier type, stereotype or interceptor binding type 
        Z then Y inherits the annotation if and only if Z declares the <literal>@Inherited</literal> 
        meta-annotation and neither Y nor any intermediate class that is a subclass of X and 
        a superclass of Y declares an annotation of type Z.</para> 
        <para>(This behavior is defined by the Java Language Specification.)</para>
      </listitem>
      <listitem>
        <para>If X is annotated with a scope type Z then Y inherits the annotation if and only 
        if Z declares the <literal>@Inherited</literal> meta-annotation and neither Y nor any 
        intermediate class that is a subclass of X and a superclass of Y declares a scope type.</para>
        <para>(This behavior is different to what is defined in the Java Language Specification.)</para>
      </listitem>
    </itemizedlist>
    
    <para>A scope type explicitly declared by X and inherited by Y from X takes precedence over 
    default scopes of stereotypes declared or inherited by Y.</para>
    
    <para>For annotations defined by the application or third-party extensions, it is 
    recommended that:</para>
    
    <itemizedlist>
      <listitem>
        <para>scope types should be declared <literal>@Inherited</literal>,</para>
      </listitem>
      <listitem>
        <para>qualifier types should not be declared <literal>@Inherited</literal>,</para>
      </listitem>
      <listitem>
        <para>interceptor binding types should be declared <literal>@Inherited</literal>, 
        and</para>
      </listitem>
       <listitem>
        <para>stereotypes may be declared <literal>@Inherited</literal>, depending upon
        the semantics of the stereotype.</para>
      </listitem>
   </itemizedlist>
   
   <para>All scope types, qualifier types, and interceptor binding types defined by this 
   specification adhere to these recommendations.</para>
   
   <para>The stereotypes defined by this specification are not declared <literal>@Inherited</literal>.</para>
   
   <para>However, in special circumstances, these recommendations may be ignored.</para>
   
   <para>Note that the <literal>@Named</literal> annotation is not declared <literal>@Inherited</literal>
   and bean names are not inherited unless specialization is used.</para>
    
  </section>
  
  <section>
    <title>Inheritance of member-level metadata</title>
    
    <para>Suppose a class X is extended directly or indirectly by the bean
    class of a managed bean or session bean Y.</para>
    
    <itemizedlist>
      <listitem>
        <para>If X declares an injected field <literal>x</literal> then Y inherits 
        <literal>x</literal>.</para>
        <para>(This behavior is defined by the Common Annotations for the Java Platform 
        specification.)</para>
      </listitem>
      <listitem>
        <para>If X declares an initializer, non-static observer, <literal>@PostConstruct</literal> 
        or <literal>@PreDestroy</literal> method <literal>x()</literal> then Y inherits 
        <literal>x()</literal> if and only if neither Y nor any intermediate class that 
        is a subclass of X and a superclass of Y overrides the method 
        <literal>x()</literal>.</para>
        <para>(This behavior is defined by the Common Annotations for the Java Platform 
        specification.)</para>
      </listitem>
      <listitem>
        <para>If X declares a non-static method <literal>x()</literal> annotated with an 
        interceptor binding type Z then Y inherits the binding if and only if neither Y nor 
        any intermediate class that is a subclass of X and a superclass of Y overrides the 
        method <literal>x()</literal>.</para>
        <para>(This behavior is defined by the Common Annotations for the Java Platform 
        specification.)</para>
      </listitem>
      <listitem>
        <para>If X declares a non-static producer or disposer method <literal>x()</literal>
        then Y does not inherit this method.<!--unless Y is explicitly declared to specialize X.--></para>
        <para>(This behavior is different to what is defined in the Common Annotations for 
        the Java Platform specification.)</para>
      </listitem>
      <listitem>
        <para>If X declares a non-static producer field <literal>x</literal> then Y does not 
        inherit this field.</para>
        <para>(This behavior is different to what is defined in the Common Annotations for 
        the Java Platform specification.)</para>
      </listitem>
    </itemizedlist>
    
      <para>If X is a generic type, and an injection point or observer method declared by X is 
      inherited by Y, and the declared type of the injection point or event parameter
      contains type variables declared by X, the type of the injection point or event parameter 
      inherited in Y is the declared type, after substitution of actual type arguments declared
      by Y or any intermediate class that is a subclass of X and a superclass of Y.</para>
      
      <para>For example, the bean <literal>DaoClient</literal> has an injection point
      of type <literal>Dao&lt;T&gt;</literal>.</para>
      
      <programlisting><![CDATA[public class DaoClient<T> {
	
    @Inject Dao<T> dao;
    ...

}]]></programlisting>

      <para>This injection point is inherited by <literal>UserDaoClient</literal>, but 
      the type of the inherited injection point is <literal>Dao&lt;User&gt;</literal>.</para>

      <programlisting><![CDATA[public class UserDaoClient 
        extends DaoClient<User> { ... }]]></programlisting>
      
  </section>
  
  <section id="specialization">
    <title>Specialization</title>
    
    <para>If two beans both support a certain bean type, and share at least
    one qualifier, then they are both eligible for injection to any injection
    point with that declared type and qualifier.</para>
    
    <para>Consider the following beans:</para>
    
    <programlisting>@Default @Asynchronous 
public class AsynchronousService implements Service { 
    ... 
}</programlisting>
    
    <programlisting>@Alternative 
public class MockAsynchronousService extends AsynchronousService { 
    ... 
}</programlisting>

    <para>Suppose that the <literal>MockAsynchronousService</literal> alternative 
    is declared in the <literal>beans.xml</literal> file of some bean archive, as 
    defined in <xref linkend="selection"/>:</para>
    
    <programlisting><![CDATA[<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <alternatives>
      <class>org.mycompany.mock.MockAsynchronousService</class>
   </alternatives>
</beans>]]></programlisting>

    <para>Then, according to the rules of <xref linkend="ambigdependencies"/>, 
    the following ambiguous dependency is resolvable, and so the attribute will 
    receive an instance of <literal>MockAsynchronousService</literal>:</para>
    
    <programlisting>@Inject Service service;</programlisting>

    <para>However, the following attribute will receive an instance of 
    <literal>AsynchronousService</literal>, even though
    <literal>MockAsynchronousService</literal> is a selected alternative, because
    <literal>MockAsynchronousService</literal> does not have the qualifier
    <literal>@Asynchronous</literal>:</para>
    
    <programlisting>@Inject @Asynchronous Service service;</programlisting>
    
    <para>This is a useful behavior in some circumstances, however, it is not
    always what is intended by the developer.</para>
    
    <para>The only way one bean can completely override a second bean at all 
    injection points is if it implements all the bean types and declares all 
    the qualifiers of the second bean. However, if the second bean declares a 
    producer method or observer method, then even this is not enough to ensure 
    that the second bean is never called!</para>
    
    <para>To help prevent developer error, the first bean may:</para>
    
    <itemizedlist>
      <listitem>
        <para>directly extend the bean class of the second bean, or</para>
      </listitem>
      <listitem>
        <para>directly override the producer method, in the case that 
        the second bean is a producer method, and then</para>
      </listitem>
    </itemizedlist>
    
    <para>explicitly declare that it <emphasis>specializes</emphasis> the 
    second bean.</para>
    
    <programlisting>@Alternative @Specializes
public class MockAsynchronousService extends AsynchronousService { 
    ... 
}</programlisting>

    <para>When an enabled bean, as defined in <xref linkend="enablement"/>, 
    specializes a second bean, we can be certain that the second bean is never 
    instantiated or called by the container. Even if the second bean defines a 
    producer or observer method, the method will never be called.</para>

    <section>
      <title>Direct and indirect specialization</title>
    
      <para>The annotation <literal>@javax.enterprise.inject.Specializes</literal> 
      is used to indicate that one bean <emphasis>directly specializes</emphasis> 
      another bean, as defined in <xref linkend="specializemanagedbean"/>, 
      <xref linkend="specializesessionbean"/> and 
      <xref linkend="specializeproducermethod"/>.</para>
        
      <para>Formally, a bean X is said to <emphasis>specialize</emphasis> 
      another bean Y if either:</para>
      
      <itemizedlist>
        <listitem>
          <para>X directly specializes Y, or</para>
        </listitem>
        <listitem>
          <para>a bean Z exists, such that X directly specializes Z and 
          Z specializes Y.</para>
        </listitem>
      </itemizedlist>
      
      <para>Then X will inherit the qualifiers and bean name of Y:</para>
    
      <itemizedlist>
        <listitem>
          <para>the qualifiers of X include all qualifiers of Y, together with all 
          qualifiers declared explicitly by X, and</para>
        </listitem>
        <listitem>
          <para>if Y has a bean name, the bean name of X is the same as the bean name of Y.</para>
        </listitem>
      </itemizedlist>
      
      <para>Furthermore, X must have all the bean types of Y. If X does not have
      some bean type of Y, the container automatically detects the problem and 
      treats it as a definition error.</para>
      
      <para>If Y has a bean name and X declares a bean name explicitly the container 
      automatically detects the problem and treats it as a definition error.</para>
      
      <para>For example, the following bean would have the inherited qualifiers 
      <literal>@Default</literal> and <literal>@Asynchronous</literal>:</para>
    
      <programlisting>@Mock @Specializes
public class MockAsynchronousService extends AsynchronousService { 
    ... 
}</programlisting>

      <para>If <literal>AsynchronousService</literal> declared a bean name:</para>
    
      <programlisting>@Default @Asynchronous @Named("asyncService")
public class AsynchronousService implements Service{ 
    ... 
}</programlisting>

      <para>Then the bean name would also automatically be inherited by 
      <literal>MockAsynchronousService</literal>.</para>
      
      <para>If an interceptor or decorator is annotated <literal>@Specializes</literal>, 
      non-portable behavior results.</para>
    
    </section>
    
  </section>
  
</chapter>

